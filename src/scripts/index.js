// import React from 'react'
// import { render } from 'react-dom'
// import { Router, Route, Link } from 'react-router'

// const App = React.createClass({
//   render() {
//     return (
//       <div>
//         <h1>App</h1>
//         <ul>
//           <li><Link to="/about">About</Link></li>
//           <li><Link to="/inbox">Inbox</Link></li>

//         </ul>
//         {this.props.children}
//       </div>
//     )
//   }
// })

// const About = React.createClass({
//   render() {
//     return <h3>About</h3>
//   }
// })

// const Inbox = React.createClass({
//   render() {
//     return (
//       <div>
//         <h2>Inbox</h2>
//         <li><Link to="/">back</Link></li>
//         {this.props.children || "Welcome to your Inbox"}
//       </div>
//     )
//   }
// })

// const Message = React.createClass({
//   render() {
//     return <h3>Message {this.props.params.id}</h3>
//   }
// })

// import { IndexRoute,Redirect } from 'react-router'

// const Dashboard = React.createClass({
//   render() {
//     return <div>Welcome to the app!</div>
//   }
// })
// import createBrowserHistory from 'history/lib/createBrowserHistory'

// render((
//   <Router history={createBrowserHistory()}>
//     <Route path="/" component={App} >
//       {/* Show the dashboard at / */}
//       <IndexRoute component={Dashboard} />
//       <Route path="about" component={About} />
//       <Route path="/" component={Dashboard} />
//       <Route path="inbox" component={Inbox}>
//         <Route path="/messages/:id" component={Message} />
//         <Redirect from="messages/:id" to="/messages/:id" />
//       </Route>
//     </Route>
//   </Router>
// ), document.body)

// var React = require('react');
// var ReactDOM = require('react-dom');
// var $ = require('jquery');
// require('../styles/index.scss')
// var Comment = React.createClass({
//   rawMarkup: function() {
//     var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
//     return { __html: rawMarkup };
//   },

//   render: function() {
//     return (
//       <div className="comment">
//         <h2 className="commentAuthor">
//           {this.props.author}
//         </h2>
//         <span dangerouslySetInnerHTML={this.rawMarkup()} />
//       </div>
//     );
//   }
// });

// var CommentBox = React.createClass({
//   loadCommentsFromServer: function() {
//     $.ajax({
//       url: this.props.url,
//       dataType: 'json',
//       cache: false,
//       success: function(data) {
//         this.setState({data: data});
//       }.bind(this),
//       error: function(xhr, status, err) {
//         console.error(this.props.url, status, err.toString());
//       }.bind(this)
//     });
//   },
//   handleCommentSubmit: function(comment) {
//     var comments = this.state.data;
//     // Optimistically set an id on the new comment. It will be replaced by an
//     // id generated by the server. In a production application you would likely
//     // not use Date.now() for this and would have a more robust system in place.
//     comment.id = Date.now();
//     var newComments = comments.concat([comment]);
//     this.setState({data: newComments});
//     $.ajax({
//       url: this.props.url,
//       dataType: 'json',
//       type: 'POST',
//       data: comment,
//       success: function(data) {
//         this.setState({data: data});
//       }.bind(this),
//       error: function(xhr, status, err) {
//         this.setState({data: comments});
//         console.error(this.props.url, status, err.toString());
//       }.bind(this)
//     });
//   },
//   getInitialState: function() {
//     return {data: []};
//   },
//   componentDidMount: function() {
//     this.loadCommentsFromServer();
//     setInterval(this.loadCommentsFromServer, this.props.pollInterval);
//   },
//   render: function() {
//     return (
//       <div className="commentBox">
//         <h1>Comments</h1>
//         <CommentList data={this.state.data} />
//         <CommentForm onCommentSubmit={this.handleCommentSubmit} />
//       </div>
//     );
//   }
// });

// var CommentList = React.createClass({
//   render: function() {
//     var commentNodes = this.props.data.map(function(comment) {
//       return (
//         <Comment author={comment.author} key={comment.id}>
//           {comment.text}
//         </Comment>
//       );
//     });
//     return (
//       <div className="commentList">
//         {commentNodes}
//       </div>
//     );
//   }
// });

// var CommentForm = React.createClass({
//   getInitialState: function() {
//     return {author: '', text: ''};
//   },
//   handleAuthorChange: function(e) {
//     this.setState({author: e.target.value});
//   },
//   handleTextChange: function(e) {
//     this.setState({text: e.target.value});
//   },
//   handleSubmit: function(e) {
//     e.preventDefault();
//     var author = this.state.author.trim();
//     var text = this.state.text.trim();
//     if (!text || !author) {
//       return;
//     }
//     this.props.onCommentSubmit({author: author, text: text});
//     this.setState({author: '', text: ''});
//   },
//   render: function() {
//     var png = require('../images/like.png');
//     return (
//       <form className="commentForm" onSubmit={this.handleSubmit}>
//         <img src={png}/>
//         <input
//           type="text"
//           placeholder="Your name"
//           value={this.state.author}
//           onChange={this.handleAuthorChange}
//         />
//         <input
//           type="text"
//           placeholder="Say something..."
//           value={this.state.text}
//           onChange={this.handleTextChange}
//         />
//         <input type="submit" value="Post" />
//       </form>
//     );
//   }
// });

// ReactDOM.render(
//   <CommentBox url="/api/comments" pollInterval={2000} />,
//   document.getElementById('content')
// );
// class A {
//   id :  undefined;
//   complete :  undefined;
//   text :undefined;
//   constructor() {
//     this.child1 = 'foo';
//     this.child2 = 'bar';
//   }
// }
// var a = new A()
// class B extends A {
//   // id: string;
//   // complete: boolean;
//   // text: string;
//   constructor(tem = 10) {
//     super();
//     this.child3 =tem;
//   }
// }
// var b = new B(11);
// a.id = 'ididid';
// console.log(a);
// console.log(b);
import Immutable from 'immutable';

const TodoRecord = Immutable.Record({
  id: undefined,
  complete: undefined,
  text: undefined,
});
class Todo extends TodoRecord {
  id: string;
  complete: boolean;
  text: string;

  constructor(text: string) {
    super({
      id: Date.now() + Math.round(Math.random() * 1000),
      complete: false,
      text,
    });
  }
}
var a = new TodoRecord();
var b = new Todo('haha');
console.log(b.text);